import pygame 
import chess
import random

# Настройки игры
BOARD_SIZE = 640
SQUARE_SIZE = BOARD_SIZE // 8
PIECE_SIZE = SQUARE_SIZE - 10

# Цвета
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREY = (128, 128, 128)
LIGHT_BLUE = (135, 206, 235)
DARK_BLUE = (0, 0, 139)

# Инициализация Pygame
pygame.init()
screen = pygame.display.set_mode((BOARD_SIZE, BOARD_SIZE))
clock = pygame.time.Clock()
pygame.display.set_caption("Шахматы")

# Загрузка изображений фигур
pieces = {}
for piece in chess.PIECE_TYPES:
    pieces[piece] = pygame.image.load(f"Isometric/Pieces/Black{chess.piece_symbol(piece)}.png")
    pieces[piece] = pygame.image.load(f"Isometric/Pieces/White{chess.piece_symbol(piece)}.png")

# Функция для отрисовки доски
def draw_board(board):
    for rank in range(8):
        for file in range(8):
            x = file * SQUARE_SIZE
            y = rank * SQUARE_SIZE
            square = (x, y, SQUARE_SIZE, SQUARE_SIZE)
            color = LIGHT_BLUE if (rank + file) % 2 == 0 else DARK_BLUE
            pygame.draw.rect(screen, color, square)

            # Отрисовка фигур
            piece = board.piece_at(chess.square(file, 7 - rank))
            if piece:
                piece_image = pieces[piece.piece_type]
                piece_image = pygame.transform.scale(piece_image, (PIECE_SIZE, PIECE_SIZE))
                screen.blit(piece_image, (x + 5, y + 5))

# Функция для отрисовки подсветки возможных ходов
def draw_moves(board, square):
    if board.is_game_over():
        return
    for move in board.legal_moves:
        if move.from_square == square:
            x = chess.square_file(move.to_square) * SQUARE_SIZE
            y = (7 - chess.square_rank(move.to_square)) * SQUARE_SIZE
            pygame.draw.rect(screen, GREY, (x, y, SQUARE_SIZE, SQUARE_SIZE))

# Функция для обработки событий
def handle_events(board):
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            return True
        elif event.type == pygame.MOUSEBUTTONUP:
            x, y = pygame.mouse.get_pos()
            file = x // SQUARE_SIZE
            rank = 7 - y // SQUARE_SIZE
            square = chess.square(file, rank)
            draw_moves(board, square)
            pygame.display.flip()
            if board.is_legal(square):
                board.push(chess.Move.null())
                board.push(chess.Move.from_uci(f"{chess.square_name(square)[0].lower()}{chess.square_name(square)[1]}e2"))
                board.push(chess.Move.null())
# Функция для отображения текста
def display_text(text, font_size, color, x, y):
    font = pygame.font.SysFont(None, font_size)
    text = font.render(text, True, color)
    screen.blit(text, (x, y))

# Основная функция игры
def play_game():
    board = chess.Board()

    while not board.is_game_over():
        clock.tick(60)

        # Отрисовка доски и текста
        draw_board(board)
        display_text("Шахматы", 50, WHITE, 20, 10)
        display_text("Ход белых", 30, WHITE, 20, BOARD_SIZE - 50)
        pygame.display.flip()

        # Обработка событий
        if handle_events(board):
            return

    # Отображение текста после окончания игры
    draw_board(board)
    display_text("Шахматы", 50, WHITE, 20, 10)
    if board.is_checkmate():
        winner = "Белые" if board.turn == chess.BLACK else "Черные"
        display_text(f"{winner} выиграли!", 30, WHITE, 20, BOARD_SIZE - 50)
    elif board.is_stalemate():
        display_text("Ничья", 30, WHITE, 20, BOARD_SIZE - 50)
    elif board.is_insufficient_material():
        display_text("Недостаточно материала для продолжения игры", 30, WHITE, 20, BOARD_SIZE - 50)
    pygame.display.flip()
    pygame.time.wait(5000)

# Запуск игры
play_game()
pygame.quit()